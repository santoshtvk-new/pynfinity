python:
  basics:
    topic-1:
      title: |
        Perform Arithmetic Operation with 2 Numbers and show result on the screen
      code: |
        print("Addition of 58 and 26:", 58+26)
        print("Subtract 26 from 58:", 58-26)
        print("Multiply 58 and 36:", 58*26)
        print("Divide 58 with 16:", 58/16)
        print("Divide 58 with 16 and show integer value:", 58//16)
        print("Divide 58 with 16 and show reminder value:", 58%16)
        print("5 to the power of 3:", 5**3)

    topic-2:
      title: |
        Define a code block with print statement and call it
      code: |
        def welcome(name):
          print(f"Hello, {name} Welcome to Pynfinity!")
      
        welcome("World")

    topic-3:
      title: |
        Variables and Data Types in Python
      code: |
        # Integer
        age = 25
        print("Age:", age)
        
        # String
        name = "Santosh"
        print("Name:", name)
        
        # Float
        height = 5.9
        print("Height:", height)
        
        # Boolean
        is_student = True
        print("Is Student:", is_student)

    topic-4:
      title: |
        Working with Lists
      code: |
        fruits = ["apple", "banana", "cherry"]
        print("List of fruits:", fruits)
        
        # Accessing elements
        print("First fruit:", fruits[0])
        
        # Adding items
        fruits.append("orange")
        print("Updated list:", fruits)
        
        # Removing items
        fruits.remove("banana")
        print("List after removing 'banana':", fruits)

    topic-5:
      title: |
        Conditionals and if-else statements
      code: |
        x = 10
        if x > 5:
          print("x is greater than 5")
        elif x == 5:
          print("x is equal to 5")
        else:
          print("x is less than 5")

    topic-6:
      title: |
        For Loop Example
      code: |
        # Loop through a list
        for fruit in fruits:
          print(fruit)

    topic-7:
      title: |
        While Loop Example
      code: |
        count = 0
        while count < 5:
          print("Count is:", count)
          count += 1

    topic-8:
      title: |
        Functions and Return Values
      code: |
        def add_numbers(a, b):
          return a + b
        
        result = add_numbers(10, 20)
        print("Result of addition:", result)

  intermediate:
    topic-1:
      title: |
        Dictionaries in Python
      code: |
        person = {
          "name": "Santosh",
          "age": 30,
          "city": "India"
        }
        print("Person Dictionary:", person)
        
        # Accessing a value
        print("Person's name:", person["name"])
        
        # Adding a new key-value pair
        person["job"] = "Engineer"
        print("Updated Person Dictionary:", person)

    topic-2:
      title: |
        String Manipulation
      code: |
        text = "Hello, Python!"
        
        # String length
        print("Length of string:", len(text))
        
        # Convert to uppercase
        print("Uppercase:", text.upper())
        
        # Replace a substring
        new_text = text.replace("Python", "World")
        print("Replaced text:", new_text)

    topic-3:
      title: |
        List Comprehensions
      code: |
        numbers = [1, 2, 3, 4, 5]
        
        # Using list comprehension to square each number
        squares = [num**2 for num in numbers]
        print("Squared numbers:", squares)

    topic-4:
      title: |
        Error Handling with Try-Except
      code: |
        try:
          x = 10 / 0
        except ZeroDivisionError:
          print("Cannot divide by zero!")
        else:
          print("Division successful!")

    topic-5:
      title: |
        Lambda Functions
      code: |
        # A simple lambda function to add two numbers
        add = lambda a, b: a + b
        result = add(5, 7)
        print("Result of addition:", result)

    topic-6:
      title: |
        Working with Files
      code: |
        # Writing to a file
        with open("sample.txt", "w") as file:
          file.write("Hello, this is written with Python.")
        
        # Reading from a file
        with open("sample.txt", "r") as file:
          content = file.read()
          print("File content:", content)

  advanced:
    topic-1:
      title: |
        Object-Oriented Programming (OOP)
      code: |
        class Person:
          def __init__(self, name, age):
            self.name = name
            self.age = age

          def greet(self):
            print(f"Hello, my name is {self.name} and I am {self.age} years old.")
        
        # Creating an object of the Person class
        person1 = Person("Santosh", 25)
        person1.greet()

    topic-2:
      title: |
        Generators in Python
      code: |
        # A simple generator function to yield numbers
        def count_up_to(max):
          count = 1
          while count <= max:
            yield count
            count += 1
        
        # Using the generator
        counter = count_up_to(5)
        for num in counter:
          print(num)

    topic-3:
      title: |
        Decorators in Python
      code: |
        def decorator(func):
          def wrapper():
            print("Before function call")
            func()
            print("After function call")
          return wrapper
        
        @decorator
        def say_hello():
          print("Hello!")
        
        say_hello()

    topic-4:
      title: |
        Handling JSON Data
      code: |
        import json
        
        # Convert Python dictionary to JSON
        person = {"name": "Alice", "age": 30}
        person_json = json.dumps(person)
        print("JSON representation:", person_json)
        
        # Convert JSON back to Python dictionary
        person_dict = json.loads(person_json)
        print("Python dictionary:", person_dict)

sql:
  basics:
    topic-1:
      title: |
        Create a Table and Insert Data
      code: |
        CREATE TABLE employees (
          id INT PRIMARY KEY,
          name VARCHAR(50),
          age INT,
          department VARCHAR(50)
        );
        
        INSERT INTO employees (id, name, age, department)
        VALUES (1, 'Santosh K', 30, 'Engineering'),
               (2, 'T V Santosh', 25, 'Marketing'),
               (3, 'Dhruv', 35, 'HR');
        
        SELECT * FROM employees;

    topic-2:
      title: |
        Basic SELECT Statement
      code: |
        SELECT name, age FROM employees;

    topic-3:
      title: |
        Filtering Data with WHERE Clause
      code: |
        SELECT name, department FROM employees
        WHERE age > 30;

    topic-4:
      title: |
        Sorting Results with ORDER BY
      code: |
        SELECT name, age FROM employees
        ORDER BY age DESC;

    topic-5:
      title: |
        Updating Data with UPDATE Statement
      code: |
        UPDATE employees
        SET age = 32
        WHERE name = 'John Doe';
        
        SELECT * FROM employees;

    topic-6:
      title: |
        Deleting Data with DELETE Statement
      code: |
        DELETE FROM employees
        WHERE name = 'Dhruv K';
        
        SELECT * FROM employees;

  intermediate:
    topic-1:
      title: |
        JOIN Operations (INNER JOIN)
      code: |
        CREATE TABLE departments (
          department_id INT PRIMARY KEY,
          department_name VARCHAR(50)
        );
        
        INSERT INTO departments (department_id, department_name)
        VALUES (1, 'Engineering'),
               (2, 'Marketing'),
               (3, 'HR');
        
        SELECT employees.name, departments.department_name
        FROM employees
        INNER JOIN departments
        ON employees.department = departments.department_name;

    topic-2:
      title: |
        Aggregate Functions (COUNT, AVG, MAX, MIN, SUM)
      code: |
        SELECT department, COUNT(*) AS num_employees
        FROM employees
        GROUP BY department;
        
        SELECT AVG(age) AS average_age FROM employees;
        
        SELECT MAX(age) AS oldest_employee_age FROM employees;
        
        SELECT MIN(age) AS youngest_employee_age FROM employees;
        
        SELECT SUM(age) AS total_age FROM employees;

    topic-3:
      title: |
        Using GROUP BY with HAVING
      code: |
        SELECT department, COUNT(*) AS num_employees
        FROM employees
        GROUP BY department
        HAVING COUNT(*) > 1;

    topic-4:
      title: |
        Using LIKE Operator for Pattern Matching
      code: |
        SELECT name FROM employees
        WHERE name LIKE 'J%';

    topic-5:
      title: |
        Working with NULL Values
      code: |
        SELECT name, age FROM employees
        WHERE age IS NULL;

    topic-6:
      title: |
        Subqueries (Nested Queries)
      code: |
        SELECT name, age
        FROM employees
        WHERE age > (SELECT AVG(age) FROM employees);

  advanced:
    topic-1:
      title: |
        UNION and UNION ALL
      code: |
        SELECT name, age FROM employees WHERE department = 'Engineering'
        UNION
        SELECT name, age FROM employees WHERE department = 'Marketing';
        
        SELECT name, age FROM employees WHERE department = 'Engineering'
        UNION ALL
        SELECT name, age FROM employees WHERE department = 'Marketing';

    topic-2:
      title: |
        Creating and Using Views
      code: |
        CREATE VIEW employee_summary AS
        SELECT name, department, age
        FROM employees;
        
        SELECT * FROM employee_summary;

    topic-3:
      title: |
        Creating Indexes to Improve Query Performance
      code: |
        CREATE INDEX idx_department ON employees(department);
        
        SELECT * FROM employees WHERE department = 'Engineering';

    topic-4:
      title: |
        Using Transactions (BEGIN, COMMIT, ROLLBACK)
      code: |
        BEGIN;
        
        UPDATE employees SET age = 40 WHERE name = 'Santosh K';
        
        COMMIT;
        
        -- ROLLBACK example:
        -- BEGIN;
        -- DELETE FROM employees WHERE name = 'Santosh K';
        -- ROLLBACK;

    topic-5:
      title: |
        Advanced JOINs (LEFT JOIN, RIGHT JOIN, FULL JOIN)
      code: |
        -- Left Join
        SELECT employees.name, departments.department_name
        FROM employees
        LEFT JOIN departments
        ON employees.department = departments.department_name;
        
        -- Right Join
        SELECT employees.name, departments.department_name
        FROM employees
        RIGHT JOIN departments
        ON employees.department = departments.department_name;
        
        -- Full Join (if supported by your DBMS)
        SELECT employees.name, departments.department_name
        FROM employees
        FULL JOIN departments
        ON employees.department = departments.department_name;

    topic-6:
      title: |
        Using CASE Statements for Conditional Logic
      code: |
        SELECT name, age,
               CASE
                 WHEN age >= 30 THEN 'Senior'
                 WHEN age < 30 THEN 'Junior'
                 ELSE 'Unknown'
               END AS experience_level
        FROM employees;

    topic-7:
      title: |
        Using Stored Procedures
      code: |
        DELIMITER //
        
        CREATE PROCEDURE get_employee_by_department(dept VARCHAR(50))
        BEGIN
          SELECT name, age
          FROM employees
          WHERE department = dept;
        END //
        
        DELIMITER ;
        
        -- Call the stored procedure:
        CALL get_employee_by_department('Engineering');


git:
  basics:
    topic-1:
      title: |
        Initialize a New Git Repository
      code: |
        # Initialize a new repository
        git init
        
        # Check the status of the repository
        git status

    topic-2:
      title: |
        Checking the Status of Your Files
      code: |
        # Check the status of the repository
        git status
        
        # Show changes in the working directory
        git diff

    topic-3:
      title: |
        Adding Files to the Staging Area
      code: |
        # Add a single file to the staging area
        git add filename.txt
        
        # Add all files to the staging area
        git add .

    topic-4:
      title: |
        Committing Changes
      code: |
        # Commit staged changes
        git commit -m "Initial commit"
        
        # View commit history
        git log

    topic-5:
      title: |
        Cloning a Repository
      code: |
        # Clone an existing repository
        git clone https://github.com/username/repository.git

    topic-6:
      title: |
        Checking the Commit History
      code: |
        # View the commit history in the repository
        git log
        
        # View the commit history with a specific format
        git log --oneline

  intermediate:
    topic-1:
      title: |
        Creating and Switching Branches
      code: |
        # Create a new branch
        git branch new-branch
        
        # Switch to the new branch
        git checkout new-branch
        
        # Alternatively, create and switch in one command
        git checkout -b new-branch

    topic-2:
      title: |
        Merging Branches
      code: |
        # Switch to the branch you want to merge into
        git checkout main
        
        # Merge another branch into the current branch
        git merge new-branch
        
        # Resolve conflicts, if any

    topic-3:
      title: |
        Deleting Branches
      code: |
        # Delete a local branch
        git branch -d new-branch
        
        # Delete a remote branch
        git push origin --delete new-branch

    topic-4:
      title: |
        Stashing Changes
      code: |
        # Stash changes that are not yet committed
        git stash
        
        # List all stashes
        git stash list
        
        # Apply the latest stash
        git stash apply

    topic-5:
      title: |
        Working with Remote Repositories
      code: |
        # Add a remote repository
        git remote add origin https://github.com/username/repository.git
        
        # Push changes to the remote repository
        git push origin main
        
        # Pull changes from the remote repository
        git pull origin main
        
        # Check remote repository URLs
        git remote -v

    topic-6:
      title: |
        Undoing Changes
      code: |
        # Undo changes in the working directory (before commit)
        git checkout -- filename.txt
        
        # Undo the last commit (keep the changes staged)
        git reset --soft HEAD~1
        
        # Undo the last commit (remove changes)
        git reset --hard HEAD~1

  advanced:
    topic-1:
      title: |
        Rebasing Branches
      code: |
        # Rebase a branch onto another branch
        git checkout feature-branch
        git rebase main
        
        # Resolve conflicts if they occur during the rebase

    topic-2:
      title: |
        Cherry-picking Commits
      code: |
        # Apply a specific commit from another branch
        git cherry-pick <commit-hash>
        
        # After cherry-pick, commit if necessary

    topic-3:
      title: |
        Tagging Releases
      code: |
        # Create a new tag
        git tag v1.0
        
        # Push tags to the remote repository
        git push origin v1.0
        
        # List all tags
        git tag
        
        # Checkout a specific tag
        git checkout v1.0

    topic-4:
      title: |
        Resetting and Reverting Commits
      code: |
        # Reset to a specific commit (and delete changes)
        git reset --hard <commit-hash>
        
        # Revert a commit (create a new commit that undoes the changes)
        git revert <commit-hash>

    topic-5:
      title: |
        Resolving Merge Conflicts
      code: |
        # After a merge conflict, Git will mark the conflicting files
        git status
        
        # Open the conflicting file and manually resolve conflicts
        # After resolving, stage the file and commit the merge
        git add filename.txt
        git commit

    topic-6:
      title: |
        Squashing Commits
      code: |
        # Combine multiple commits into one (during rebase)
        git rebase -i HEAD~3
        
        # Mark the commits you want to squash
        # Change 'pick' to 'squash' for the commits to combine
        
        # After finishing, you'll have one commit containing all the changes

linux_shell:
  basics:
    topic-1:
      title: |
        Navigating the File System
      code: |
        # Print the current working directory
        pwd
        
        # List files and directories
        ls
        
        # Change directory
        cd /path/to/directory
        
        # Go to home directory
        cd ~
        
        # Go up one directory
        cd ..

    topic-2:
      title: |
        Creating and Removing Files and Directories
      code: |
        # Create a new directory
        mkdir new_directory
        
        # Create a new file
        touch new_file.txt
        
        # Remove a file
        rm new_file.txt
        
        # Remove a directory
        rmdir new_directory
        
        # Remove a directory and its contents
        rm -r directory_name

    topic-3:
      title: |
        Viewing File Contents
      code: |
        # View the contents of a file
        cat filename.txt
        
        # View the contents of a file with pagination
        less filename.txt
        
        # View the first few lines of a file
        head filename.txt
        
        # View the last few lines of a file
        tail filename.txt

    topic-4:
      title: |
        File Permissions and Ownership
      code: |
        # View file permissions and ownership
        ls -l filename.txt
        
        # Change file permissions (read, write, execute)
        chmod 755 filename.txt
        
        # Change file owner
        sudo chown user:group filename.txt

    topic-5:
      title: |
        Redirecting Output
      code: |
        # Redirect output to a file (overwrite)
        echo "Hello World" > output.txt
        
        # Append output to a file
        echo "New Line" >> output.txt
        
        # Redirect stderr to a file
        ls non_existent_file 2> error.txt
        
        # Redirect both stdout and stderr to the same file
        ls valid_file non_existent_file &> output_and_error.txt

  intermediate:
    topic-1:
      title: |
        Piping Commands
      code: |
        # Use a pipe to send the output of one command to another
        cat filename.txt | grep "search_term"
        
        # Chain multiple commands together
        cat filename.txt | grep "search_term" | wc -l

    topic-2:
      title: |
        Using Variables in Shell
      code: |
        # Declare a variable
        my_variable="Hello World"
        
        # Use the variable
        echo $my_variable
        
        # Assign the output of a command to a variable
        file_count=$(ls | wc -l)
        echo "Number of files: $file_count"

    topic-3:
      title: |
        Basic Shell Loops
      code: |
        # For loop to print numbers from 1 to 5
        for i in {1..5}; do
          echo $i
        done
        
        # While loop to count down from 5
        count=5
        while [ $count -gt 0 ]; do
          echo $count
          ((count--))
        done

    topic-4:
      title: |
        Using Conditional Statements (if-else)
      code: |
        # Check if a file exists
        if [ -f "filename.txt" ]; then
          echo "File exists"
        else
          echo "File does not exist"
        fi
        
        # Check if a directory exists
        if [ -d "directory_name" ]; then
          echo "Directory exists"
        fi

    topic-5:
      title: |
        Working with Processes
      code: |
        # List all running processes
        ps
        
        # List all processes, including background jobs
        ps aux
        
        # Kill a process by PID
        kill <pid>
        
        # Run a command in the background
        command &

    topic-6:
      title: |
        Searching Files and Directories
      code: |
        # Find a file by name
        find /path/to/search -name "filename.txt"
        
        # Search for a string in a file
        grep "search_term" filename.txt
        
        # Search for a string in all files in a directory
        grep -r "search_term" /path/to/directory

  advanced:
    topic-1:
      title: |
        Creating and Using Functions
      code: |
        # Define a function
        my_function() {
          echo "Hello from the function"
        }
        
        # Call the function
        my_function

    topic-2:
      title: |
        Using Cron Jobs for Scheduling
      code: |
        # Edit crontab (schedule tasks)
        crontab -e
        
        # Example cron job to run a script every day at 2am
        0 2 * * * /path/to/script.sh
        
        # List scheduled cron jobs
        crontab -l

    topic-3:
      title: |
        Shell Scripting with Conditionals and Loops
      code: |
        # Shell script that checks if a directory exists and lists its contents
        if [ -d "$1" ]; then
          echo "Directory exists. Listing contents:"
          ls "$1"
        else
          echo "Directory does not exist."
        fi

    topic-4:
      title: |
        Using AWK for Text Processing
      code: |
        # Print the first column of a text file
        awk '{print $1}' filename.txt
        
        # Sum the values in the second column
        awk '{sum += $2} END {print sum}' filename.txt

    topic-5:
      title: |
        Using Sed for Text Substitution
      code: |
        # Replace a string in a file
        sed -i 's/old_string/new_string/g' filename.txt
        
        # Delete lines matching a pattern
        sed '/pattern/d' filename.txt

    topic-6:
      title: |
        Networking Commands (ping, netstat, etc.)
      code: |
        # Check connectivity to a remote host
        ping google.com
        
        # View all network connections
        netstat -tuln
        
        # Display IP address information
        ifconfig
        
        # Show routing table
        route -n

    topic-7:
      title: |
        File Compression and Archiving
      code: |
        # Create a tar archive
        tar -cvf archive.tar /path/to/files
        
        # Extract a tar archive
        tar -xvf archive.tar
        
        # Compress a file with gzip
        gzip filename.txt
        
        # Decompress a gzip file
        gunzip filename.txt.gz

java:
  basics:
    topic-1:
      title: |
        Print "Hello, World!" to the Console
      code: |
        public class HelloWorld {
            public static void main(String[] args) {
                System.out.println("Hello, World!");
            }
        }

    topic-2:
      title: |
        Declare and Use Variables
      code: |
        public class VariablesExample {
            public static void main(String[] args) {
                String name = "Santosh";
                int age = 25;
                System.out.println("Name: " + name);
                System.out.println("Age: " + age);
            }
        }

    topic-3:
      title: |
        Perform Arithmetic Operations
      code: |
        public class ArithmeticOperations {
            public static void main(String[] args) {
                int a = 10, b = 5;
                System.out.println("Addition: " + (a + b));
                System.out.println("Subtraction: " + (a - b));
                System.out.println("Multiplication: " + (a * b));
                System.out.println("Division: " + (a / b));
                System.out.println("Modulus: " + (a % b));
            }
        }

    topic-4:
      title: |
        Conditional Statements (if-else)
      code: |
        public class ConditionalExample {
            public static void main(String[] args) {
                int age = 20;
                if (age >= 18) {
                    System.out.println("Eligible for voting");
                } else {
                    System.out.println("Not eligible for voting");
                }
            }
        }

    topic-5:
      title: |
        Using Loops (for, while)
      code: |
        public class LoopExample {
            public static void main(String[] args) {
                // For loop example
                for (int i = 1; i <= 5; i++) {
                    System.out.println("Santosh is learning Java - Iteration: " + i);
                }

                // While loop example
                int count = 1;
                while (count <= 3) {
                    System.out.println("Dhruv is exploring Java - Attempt: " + count);
                    count++;
                }
            }
        }

    topic-6:
      title: |
        Arrays in Java
      code: |
        public class ArrayExample {
            public static void main(String[] args) {
                String[] names = {"Santosh", "Kumar", "Dhruv", "Pynfinity"};
                for (String name : names) {
                    System.out.println("Name: " + name);
                }
            }
        }

  intermediate:
    topic-1:
      title: |
        Methods in Java
      code: |
        public class MethodExample {
            public static void greet(String name) {
                System.out.println("Hello, " + name + "! Welcome to Pynfinity channel.");
            }

            public static void main(String[] args) {
                greet("Santosh");
                greet("Kumar");
            }
        }

    topic-2:
      title: |
        Classes and Objects
      code: |
        public class Person {
            String name;
            int age;

            // Constructor
            public Person(String name, int age) {
                this.name = name;
                this.age = age;
            }

            // Method to display information
            public void displayInfo() {
                System.out.println("Name: " + name);
                System.out.println("Age: " + age);
            }

            public static void main(String[] args) {
                Person person1 = new Person("Dhruv", 25);
                person1.displayInfo();
            }
        }

    topic-3:
      title: |
        Using Switch-Case
      code: |
        public class SwitchExample {
            public static void main(String[] args) {
                String day = "Tuesday";
                switch (day) {
                    case "Monday":
                        System.out.println("Start of the week!");
                        break;
                    case "Tuesday":
                        System.out.println("Second day of the week.");
                        break;
                    case "Wednesday":
                        System.out.println("Mid-week day.");
                        break;
                    default:
                        System.out.println("Not a valid day.");
                        break;
                }
            }
        }

    topic-4:
      title: |
        Working with Strings
      code: |
        public class StringExample {
            public static void main(String[] args) {
                String channelName = "Pynfinity";
                String message = "Welcome to the " + channelName + " educational channel!";
                
                // Length of the string
                System.out.println("Message length: " + message.length());
                
                // Convert to uppercase
                System.out.println("Uppercase: " + message.toUpperCase());
                
                // Check if the string contains a specific word
                System.out.println("Contains 'educational': " + message.contains("educational"));
            }
        }

    topic-5:
      title: |
        Exception Handling (try-catch)
      code: |
        public class ExceptionExample {
            public static void main(String[] args) {
                try {
                    int result = 10 / 0;
                } catch (ArithmeticException e) {
                    System.out.println("Error: Division by zero is not allowed.");
                }
            }
        }

  advanced:
    topic-1:
      title: |
        Inheritance in Java
      code: |
        class Animal {
            void sound() {
                System.out.println("Animals make sounds");
            }
        }

        class Dog extends Animal {
            void sound() {
                System.out.println("Dogs bark");
            }
        }

        public class InheritanceExample {
            public static void main(String[] args) {
                Dog myDog = new Dog();
                myDog.sound();  // Dog's sound
            }
        }

    topic-2:
      title: |
        Polymorphism in Java
      code: |
        class Animal {
            void sound() {
                System.out.println("Animal makes a sound");
            }
        }

        class Dog extends Animal {
            @Override
            void sound() {
                System.out.println("Dog barks");
            }
        }

        class Cat extends Animal {
            @Override
            void sound() {
                System.out.println("Cat meows");
            }
        }

        public class PolymorphismExample {
            public static void main(String[] args) {
                Animal myAnimal = new Animal();
                Animal myDog = new Dog();
                Animal myCat = new Cat();

                myAnimal.sound();
                myDog.sound();
                myCat.sound();
            }
        }

    topic-3:
      title: |
        Abstract Classes in Java
      code: |
        abstract class Animal {
            abstract void sound();
        }

        class Dog extends Animal {
            void sound() {
                System.out.println("Dog barks");
            }
        }

        public class AbstractClassExample {
            public static void main(String[] args) {
                Dog myDog = new Dog();
                myDog.sound();  // Dog's sound
            }
        }

    topic-4:
      title: |
        Interfaces in Java
      code: |
        interface Animal {
            void sound();
        }

        class Dog implements Animal {
            public void sound() {
                System.out.println("Dog barks");
            }
        }

        public class InterfaceExample {
            public static void main(String[] args) {
                Dog myDog = new Dog();
                myDog.sound();  // Dog's sound
            }
        }

    topic-5:
      title: |
        Working with Collections (ArrayList)
      code: |
        import java.util.ArrayList;

        public class CollectionExample {
            public static void main(String[] args) {
                ArrayList<String> names = new ArrayList<>();
                names.add("Santosh");
                names.add("Kumar");
                names.add("Dhruv");
                
                // Print all elements
                for (String name : names) {
                    System.out.println("Name: " + name);
                }
            }
        }

    topic-6:
      title: |
        File Handling in Java
      code: |
        import java.io.*;

        public class FileHandlingExample {
            public static void main(String[] args) {
                try {
                    FileWriter writer = new FileWriter("example.txt");
                    writer.write("Hello, this is a test file for Pynfinity educational channel.");
                    writer.close();
                    
                    FileReader reader = new FileReader("example.txt");
                    int i;
                    while ((i = reader.read()) != -1) {
                        System.out.print((char) i);
                    }
                    reader.close();
                } catch (IOException e) {
                    System.out.println("An error occurred.");
                    e.printStackTrace();
                }
            }
        }

pandas:
  basics:
    topic-1:
      title: |
        Create a Pandas DataFrame and Display it
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', 'Pynfinity'],
            'Age': [25, 30, 22, 24],
            'Channel': ['TVS', 'Educational', 'Channel', 'Pynfinity']
        }

        df = pd.DataFrame(data)
        print(df)

    topic-2:
      title: |
        Select a Column from DataFrame
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', 'Pynfinity'],
            'Age': [25, 30, 22, 24]
        }

        df = pd.DataFrame(data)

        # Select a column
        print(df['Name'])

    topic-3:
      title: |
        Filter Rows Based on Condition
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', 'Pynfinity'],
            'Age': [25, 30, 22, 24]
        }

        df = pd.DataFrame(data)

        # Filter rows where Age is greater than 24
        filtered_df = df[df['Age'] > 24]
        print(filtered_df)

    topic-4:
      title: |
        Adding New Column to DataFrame
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', 'Pynfinity'],
            'Age': [25, 30, 22, 24]
        }

        df = pd.DataFrame(data)

        # Add a new column
        df['Channel'] = ['TVS', 'Educational', 'Channel', 'Pynfinity']
        print(df)

    topic-5:
      title: |
        Handle Missing Data in Pandas
      code: |
        import pandas as pd
        import numpy as np

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', np.nan],
            'Age': [25, 30, np.nan, 24]
        }

        df = pd.DataFrame(data)

        # Fill missing data
        df['Name'].fillna('Unknown', inplace=True)
        df['Age'].fillna(df['Age'].mean(), inplace=True)

        print(df)

  intermediate:
    topic-1:
      title: |
        Group Data by Column
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', 'Pynfinity'],
            'Age': [25, 30, 22, 24],
            'Channel': ['TVS', 'Educational', 'Channel', 'Pynfinity']
        }

        df = pd.DataFrame(data)

        # Group by Channel and calculate mean age
        grouped = df.groupby('Channel')['Age'].mean()
        print(grouped)

    topic-2:
      title: |
        Sorting Data in DataFrame
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', 'Pynfinity'],
            'Age': [25, 30, 22, 24]
        }

        df = pd.DataFrame(data)

        # Sort by Age in descending order
        sorted_df = df.sort_values(by='Age', ascending=False)
        print(sorted_df)

    topic-3:
      title: |
        Merge Two DataFrames
      code: |
        import pandas as pd

        data1 = {
            'Name': ['Santosh', 'Kumar', 'Dhruv'],
            'Age': [25, 30, 22]
        }
        data2 = {
            'Name': ['Santosh', 'Kumar', 'Dhruv'],
            'Channel': ['TVS', 'Educational', 'Channel']
        }

        df1 = pd.DataFrame(data1)
        df2 = pd.DataFrame(data2)

        # Merge the DataFrames on 'Name'
        merged_df = pd.merge(df1, df2, on='Name')
        print(merged_df)

    topic-4:
      title: |
        Apply Functions to Columns
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv'],
            'Age': [25, 30, 22]
        }

        df = pd.DataFrame(data)

        # Apply a function to the Age column
        df['Age'] = df['Age'].apply(lambda x: x + 1)
        print(df)

  advanced:
    topic-1:
      title: |
        Pivot Table in Pandas
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', 'Pynfinity'],
            'Age': [25, 30, 22, 24],
            'Channel': ['TVS', 'Educational', 'Channel', 'Pynfinity']
        }

        df = pd.DataFrame(data)

        # Create a pivot table
        pivot_table = df.pivot_table(values='Age', index='Channel', aggfunc='mean')
        print(pivot_table)

    topic-2:
      title: |
        Handle Duplicates in DataFrame
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv', 'Dhruv', 'Pynfinity'],
            'Age': [25, 30, 22, 22, 24]
        }

        df = pd.DataFrame(data)

        # Remove duplicates based on 'Name'
        df_no_duplicates = df.drop_duplicates(subset='Name')
        print(df_no_duplicates)

    topic-3:
      title: |
        Save DataFrame to CSV
      code: |
        import pandas as pd

        data = {
            'Name': ['Santosh', 'Kumar', 'Dhruv'],
            'Age': [25, 30, 22]
        }

        df = pd.DataFrame(data)

        # Save DataFrame to CSV file
        df.to_csv('output.csv', index=False)
        print("DataFrame saved to CSV.")

    topic-4:
      title: |
        Load DataFrame from CSV
      code: |
        import pandas as pd

        # Load data from a CSV file
        df = pd.read_csv('output.csv')
        print(df)

selenium:
  basics:
    topic-1:
      title: |
        Setup WebDriver and Open a Website
      code: |
        from selenium import webdriver

        # Setup the WebDriver
        driver = webdriver.Chrome()

        # Open a website
        driver.get("https://www.google.com")

        # Close the browser
        driver.quit()

    topic-2:
      title: |
        Find Elements by ID and Click
      code: |
        from selenium import webdriver

        driver = webdriver.Chrome()
        driver.get("https://www.google.com")

        # Find an element by its ID and click
        search_box = driver.find_element_by_id("lst-ib")
        search_box.send_keys("Pynfinity Educational Channel")
        search_box.submit()

        # Close the browser
        driver.quit()

    topic-3:
      title: |
        Find Elements by Class Name
      code: |
        from selenium import webdriver

        driver = webdriver.Chrome()
        driver.get("https://www.google.com")

        # Find an element by its class name
        result = driver.find_element_by_class_name("g")
        print(result.text)

        driver.quit()

    topic-4:
      title: |
        Wait for an Element to Appear
      code: |
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC

        driver = webdriver.Chrome()
        driver.get("https://www.google.com")

        # Wait until the element is visible
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.ID, "lst-ib"))
        )

        driver.quit()

    topic-5:
      title: |
        Interact with a Dropdown
      code: |
        from selenium import webdriver
        from selenium.webdriver.support.ui import Select

        driver = webdriver.Chrome()
        driver.get("https://www.yourwebsite.com")

        # Locate dropdown
        dropdown = driver.find_element_by_id("dropdown_id")
        select = Select(dropdown)

        # Select option by visible text
        select.select_by_visible_text("Option 1")

        driver.quit()

  intermediate:
    topic-1:
      title: |
        Working with Multiple Browser Tabs
      code: |
        from selenium import webdriver
        import time

        driver = webdriver.Chrome()
        driver.get("https://www.google.com")

        # Open a new tab
        driver.execute_script("window.open('');")
        driver.switch_to.window(driver.window_handles[1])

        # Navigate to another website in the new tab
        driver.get("https://www.youtube.com")

        # Switch back to the first tab
        driver.switch_to.window(driver.window_handles[0])

        driver.quit()

    topic-2:
      title: |
        Taking a Screenshot of a Webpage
      code: |
        from selenium import webdriver

        driver = webdriver.Chrome()
        driver.get("https://www.google.com")

        # Take a screenshot
        driver.save_screenshot("google_screenshot.png")

        driver.quit()

    topic-3:
      title: |
        Handling Alerts in Selenium
      code: |
        from selenium import webdriver
        from selenium.webdriver.common.alert import Alert

        driver = webdriver.Chrome()
        driver.get("https://www.yourwebsite.com")

        # Trigger alert
        driver.execute_script("alert('This is a test alert!');")

        # Switch to alert and accept it
        alert = Alert(driver)
        alert.accept()

        driver.quit()

    topic-4:
      title: |
        Extract Text from a Web Element
      code: |
        from selenium import webdriver

        driver = webdriver.Chrome()
        driver.get("https://www.example.com")

        # Extract text from an element
        heading = driver.find_element_by_tag_name("h1")
        print("Heading text: ", heading.text)

        driver.quit()

  advanced:
    topic-1:
      title: |
        Handling Dynamic Content with Selenium
      code: |
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC

        driver = webdriver.Chrome()
        driver.get("https://www.example.com")

        # Wait for dynamic content to load
        dynamic_content = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "dynamic_content"))
        )

        print(dynamic_content.text)
        driver.quit()

    topic-2:
      title: |
        Automate Form Submission with Selenium
      code: |
        from selenium import webdriver

        driver = webdriver.Chrome()
        driver.get("https://www.example.com/form")

        # Fill out a form
        name_input = driver.find_element_by_name("name")
        name_input.send_keys("Santosh Kumar")

        email_input = driver.find_element_by_name("email")
        email_input.send_keys("santosh@example.com")

        # Submit the form
        submit_button = driver.find_element_by_name("submit")
        submit_button.click()

        driver.quit()

c:
  basics:
    topic-1:
      title: |
        Print "Hello, World!" to the Console
      code: |
        #include <stdio.h>

        int main() {
            printf("Hello, World!\n");
            return 0;
        }

    topic-2:
      title: |
        Declare and Use Variables
      code: |
        #include <stdio.h>

        int main() {
            char name[] = "Santosh";
            int age = 25;
            printf("Name: %s\n", name);
            printf("Age: %d\n", age);
            return 0;
        }

    topic-3:
      title: |
        Perform Arithmetic Operations
      code: |
        #include <stdio.h>

        int main() {
            int a = 10, b = 5;
            printf("Addition: %d\n", a + b);
            printf("Subtraction: %d\n", a - b);
            printf("Multiplication: %d\n", a * b);
            printf("Division: %d\n", a / b);
            printf("Modulus: %d\n", a % b);
            return 0;
        }

    topic-4:
      title: |
        Conditional Statements (if-else)
      code: |
        #include <stdio.h>

        int main() {
            int age = 20;
            if (age >= 18) {
                printf("Eligible for voting\n");
            } else {
                printf("Not eligible for voting\n");
            }
            return 0;
        }

    topic-5:
      title: |
        Loops (for, while)
      code: |
        #include <stdio.h>

        int main() {
            // For loop example
            for (int i = 1; i <= 5; i++) {
                printf("Santosh is learning C - Iteration: %d\n", i);
            }

            // While loop example
            int count = 1;
            while (count <= 3) {
                printf("Dhruv is exploring C - Attempt: %d\n", count);
                count++;
            }
            return 0;
        }

  intermediate:
    topic-1:
      title: |
        Functions in C
      code: |
        #include <stdio.h>

        void greet(char name[]) {
            printf("Hello, %s! Welcome to Pynfinity.\n", name);
        }

        int main() {
            greet("Santosh");
            greet("Kumar");
            return 0;
        }

    topic-2:
      title: |
        Arrays in C
      code: |
        #include <stdio.h>

        int main() {
            char names[4][10] = {"Santosh", "Kumar", "Dhruv", "Pynfinity"};
            for (int i = 0; i < 4; i++) {
                printf("Name: %s\n", names[i]);
            }
            return 0;
        }

    topic-3:
      title: |
        Pointers in C
      code: |
        #include <stdio.h>

        int main() {
            int num = 10;
            int *ptr = &num;

            printf("Value of num: %d\n", num);
            printf("Address of num: %p\n", &num);
            printf("Value stored at ptr: %d\n", *ptr);

            return 0;
        }

    topic-4:
      title: |
        Strings in C
      code: |
        #include <stdio.h>
        #include <string.h>

        int main() {
            char str[20] = "Pynfinity Channel";

            printf("String: %s\n", str);
            printf("Length of string: %lu\n", strlen(str));

            // Copy string
            char copy[20];
            strcpy(copy, str);
            printf("Copied string: %s\n", copy);

            return 0;
        }

  advanced:
    topic-1:
      title: |
        Structures in C
      code: |
        #include <stdio.h>

        struct Person {
            char name[20];
            int age;
        };

        int main() {
            struct Person p1 = {"Santosh", 25};
            struct Person p2 = {"Kumar", 30};

            printf("Name: %s, Age: %d\n", p1.name, p1.age);
            printf("Name: %s, Age: %d\n", p2.name, p2.age);
            return 0;
        }

    topic-2:
      title: |
        File Handling in C
      code: |
        #include <stdio.h>

        int main() {
            FILE *file = fopen("example.txt", "w");

            if (file == NULL) {
                printf("Could not open file\n");
                return 1;
            }

            fprintf(file, "This is a test file created by Santosh.\n");
            fclose(file);

            // Reading from file
            file = fopen("example.txt", "r");
            char ch;
            while ((ch = fgetc(file)) != EOF) {
                putchar(ch);
            }
            fclose(file);

            return 0;
        }
cpp:
  basics:
    topic-1:
      title: |
        Print "Hello, World!" to the Console
      code: |
        #include <iostream>

        int main() {
            std::cout << "Hello, World!" << std::endl;
            return 0;
        }

    topic-2:
      title: |
        Declare and Use Variables
      code: |
        #include <iostream>

        int main() {
            std::string name = "Santosh";
            int age = 25;
            std::cout << "Name: " << name << std::endl;
            std::cout << "Age: " << age << std::endl;
            return 0;
        }

    topic-3:
      title: |
        Perform Arithmetic Operations
      code: |
        #include <iostream>

        int main() {
            int a = 10, b = 5;
            std::cout << "Addition: " << a + b << std::endl;
            std::cout << "Subtraction: " << a - b << std::endl;
            std::cout << "Multiplication: " << a * b << std::endl;
            std::cout << "Division: " << a / b << std::endl;
            std::cout << "Modulus: " << a % b << std::endl;
            return 0;
        }

    topic-4:
      title: |
        Conditional Statements (if-else)
      code: |
        #include <iostream>

        int main() {
            int age = 20;
            if (age >= 18) {
                std::cout << "Eligible for voting" << std::endl;
            } else {
                std::cout << "Not eligible for voting" << std::endl;
            }
            return 0;
        }

    topic-5:
      title: |
        Loops (for, while)
      code: |
        #include <iostream>

        int main() {
            // For loop example
            for (int i = 1; i <= 5; i++) {
                std::cout << "Santosh is learning C++ - Iteration: " << i << std::endl;
            }

            // While loop example
            int count = 1;
            while (count <= 3) {
                std::cout << "Dhruv is exploring C++ - Attempt: " << count << std::endl;
                count++;
            }
            return 0;
        }

  intermediate:
    topic-1:
      title: |
        Functions in C++
      code: |
        #include <iostream>

        void greet(std::string name) {
            std::cout << "Hello, " << name << "! Welcome to Pynfinity." << std::endl;
        }

        int main() {
            greet("Santosh");
            greet("Kumar");
            return 0;
        }

    topic-2:
      title: |
        Arrays in C++
      code: |
        #include <iostream>

        int main() {
            std::string names[4] = {"Santosh", "Kumar", "Dhruv", "Pynfinity"};
            for (int i = 0; i < 4; i++) {
                std::cout << "Name: " << names[i] << std::endl;
            }
            return 0;
        }

    topic-3:
      title: |
        Pointers in C++
      code: |
        #include <iostream>

        int main() {
            int num = 10;
            int *ptr = &num;

            std::cout << "Value of num: " << num << std::endl;
            std::cout << "Address of num: " << &num << std::endl;
            std::cout << "Value stored at ptr: " << *ptr << std::endl;

            return 0;
        }

    topic-4:
      title: |
        Strings in C++
      code: |
        #include <iostream>
        #include <string>

        int main() {
            std::string str = "Pynfinity Channel";

            std::cout << "String: " << str << std::endl;
            std::cout << "Length of string: " << str.length() << std::endl;

            // Copy string
            std::string copy = str;
            std::cout << "Copied string: " << copy << std::endl;

            return 0;
        }

  advanced:
    topic-1:
      title: |
        Classes and Objects in C++
      code: |
        #include <iostream>

        class Person {
        public:
            std::string name;
            int age;

            // Constructor
            Person(std::string n, int a) {
                name = n;
                age = a;
            }

            void display() {
                std::cout << "Name: " << name << ", Age: " << age << std::endl;
            }
        };

        int main() {
            Person p1("Santosh", 25);
            p1.display();

            Person p2("Kumar", 30);
            p2.display();

            return 0;
        }

    topic-2:
      title: |
        File Handling in C++
      code: |
        #include <iostream>
        #include <fstream>

        int main() {
            std::ofstream outFile("example.txt");

            if (outFile.is_open()) {
                outFile << "This is a test file created by Santosh.\n";
                outFile.close();
            } else {
                std::cout << "Unable to open file" << std::endl;
            }

            // Reading from the file
            std::ifstream inFile("example.txt");
            std::string line;
            if (inFile.is_open()) {
                while (getline(inFile, line)) {
                    std::cout << line << std::endl;
                }
                inFile.close();
            } else {
                std::cout << "Unable to open file" << std::endl;
            }

            return 0;
        }

csharp:
  basics:
    topic-1:
      title: |
        Print "Hello, World!" to the Console
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                Console.WriteLine("Hello, World!");
            }
        }

    topic-2:
      title: |
        Variables and Data Types
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                string name = "Santosh";
                int age = 25;
                double price = 19.99;
                bool isLearning = true;

                Console.WriteLine($"Name: {name}");
                Console.WriteLine($"Age: {age}");
                Console.WriteLine($"Price: {price}");
                Console.WriteLine($"Is Learning: {isLearning}");
            }
        }

    topic-3:
      title: |
        Arithmetic Operations in C#
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                int a = 10, b = 5;

                Console.WriteLine("Addition: " + (a + b));
                Console.WriteLine("Subtraction: " + (a - b));
                Console.WriteLine("Multiplication: " + (a * b));
                Console.WriteLine("Division: " + (a / b));
                Console.WriteLine("Modulus: " + (a % b));
            }
        }

    topic-4:
      title: |
        Conditional Statements (if-else)
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                int age = 18;

                if (age >= 18)
                {
                    Console.WriteLine("Eligible for voting");
                }
                else
                {
                    Console.WriteLine("Not eligible for voting");
                }
            }
        }

    topic-5:
      title: |
        Switch Case Example
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                int day = 3;
                string dayName;

                switch (day)
                {
                    case 1:
                        dayName = "Monday";
                        break;
                    case 2:
                        dayName = "Tuesday";
                        break;
                    case 3:
                        dayName = "Wednesday";
                        break;
                    case 4:
                        dayName = "Thursday";
                        break;
                    case 5:
                        dayName = "Friday";
                        break;
                    default:
                        dayName = "Weekend";
                        break;
                }

                Console.WriteLine("Day: " + dayName);
            }
        }

  intermediate:
    topic-1:
      title: |
        Loops in C#
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                // For Loop
                for (int i = 1; i <= 5; i++)
                {
                    Console.WriteLine($"Santosh learning C# - Iteration: {i}");
                }

                // While Loop
                int count = 1;
                while (count <= 3)
                {
                    Console.WriteLine($"Dhruv exploring C# - Attempt: {count}");
                    count++;
                }
            }
        }

    topic-2:
      title: |
        Arrays in C#
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                string[] names = { "Santosh", "Kumar", "Dhruv", "Pynfinity" };

                for (int i = 0; i < names.Length; i++)
                {
                    Console.WriteLine($"Name {i + 1}: {names[i]}");
                }
            }
        }

    topic-3:
      title: |
        Functions in C#
      code: |
        using System;

        class Program
        {
            static void Greet(string name)
            {
                Console.WriteLine($"Hello, {name}! Welcome to C#.");
            }

            static void Main()
            {
                Greet("Santosh");
                Greet("Kumar");
            }
        }

    topic-4:
      title: |
        Object-Oriented Programming (OOP) Concepts
      code: |
        using System;

        class Person
        {
            public string Name { get; set; }
            public int Age { get; set; }

            // Constructor
            public Person(string name, int age)
            {
                Name = name;
                Age = age;
            }

            public void Introduce()
            {
                Console.WriteLine($"Hi, my name is {Name} and I am {Age} years old.");
            }
        }

        class Program
        {
            static void Main()
            {
                Person person1 = new Person("Santosh", 25);
                Person person2 = new Person("Kumar", 30);

                person1.Introduce();
                person2.Introduce();
            }
        }

    topic-5:
      title: |
        Handling Exceptions in C#
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                try
                {
                    int[] numbers = { 1, 2, 3 };
                    Console.WriteLine(numbers[5]); // Index out of range
                }
                catch (IndexOutOfRangeException ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }
                finally
                {
                    Console.WriteLine("This block always runs.");
                }
            }
        }

  advanced:
    topic-1:
      title: |
        Inheritance in C#
      code: |
        using System;

        class Animal
        {
            public string Name { get; set; }

            public void Speak()
            {
                Console.WriteLine($"{Name} makes a sound.");
            }
        }

        class Dog : Animal
        {
            public void Bark()
            {
                Console.WriteLine($"{Name} barks.");
            }
        }

        class Program
        {
            static void Main()
            {
                Dog dog = new Dog();
                dog.Name = "Buddy";
                dog.Speak();
                dog.Bark();
            }
        }

    topic-2:
      title: |
        Polymorphism in C#
      code: |
        using System;

        class Animal
        {
            public virtual void Speak()
            {
                Console.WriteLine("The animal makes a sound.");
            }
        }

        class Dog : Animal
        {
            public override void Speak()
            {
                Console.WriteLine("The dog barks.");
            }
        }

        class Program
        {
            static void Main()
            {
                Animal myAnimal = new Animal();
                myAnimal.Speak();

                Dog myDog = new Dog();
                myDog.Speak();
            }
        }

    topic-3:
      title: |
        Interfaces in C#
      code: |
        using System;

        interface IDriveable
        {
            void Drive();
        }

        class Car : IDriveable
        {
            public void Drive()
            {
                Console.WriteLine("The car is driving.");
            }
        }

        class Program
        {
            static void Main()
            {
                IDriveable myCar = new Car();
                myCar.Drive();
            }
        }

    topic-4:
      title: |
        LINQ (Language Integrated Query) in C#
      code: |
        using System;
        using System.Linq;

        class Program
        {
            static void Main()
            {
                int[] numbers = { 5, 10, 15, 20, 25 };

                var result = from number in numbers
                             where number > 10
                             select number;

                foreach (var number in result)
                {
                    Console.WriteLine(number);
                }
            }
        }

    topic-5:
      title: |
        File Handling in C#
      code: |
        using System;
        using System.IO;

        class Program
        {
            static void Main()
            {
                string filePath = "example.txt";

                // Writing to a file
                File.WriteAllText(filePath, "This is a test file written by Santosh.");

                // Reading from the file
                string fileContent = File.ReadAllText(filePath);
                Console.WriteLine(fileContent);
            }
        }

    topic-6:
      title: |
        Delegates in C#
      code: |
        using System;

        delegate void GreetDelegate(string name);

        class Program
        {
            static void Greet(string name)
            {
                Console.WriteLine($"Hello, {name}!");
            }

            static void Main()
            {
                GreetDelegate greet = new GreetDelegate(Greet);
                greet("Santosh");
            }
        }

    topic-7:
      title: |
        Lambda Expressions in C#
      code: |
        using System;

        class Program
        {
            static void Main()
            {
                Func<int, int, int> add = (x, y) => x + y;
                Console.WriteLine($"Sum: {add(5, 10)}");

                Func<string, bool> isShortName = name => name.Length <= 5;
                Console.WriteLine($"Is 'Dhruv' short name? {isShortName("Dhruv")}");
            }
        }

    topic-8:
      title: |
        Async and Await in C#
      code: |
        using System;
        using System.Threading.Tasks;

        class Program
        {
            static async Task Main()
            {
                await DoTaskAsync();
                Console.WriteLine("Main method complete");
            }

            static async Task DoTaskAsync()
            {
                await Task.Delay(2000);
                Console.WriteLine("Task complete after delay");
            }
        }
